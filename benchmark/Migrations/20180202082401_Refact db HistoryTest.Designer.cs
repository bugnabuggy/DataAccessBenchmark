// <auto-generated />
using benchmark.Functional.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace benchmark.Migrations
{
    [DbContext(typeof(BenchmarkDataContext))]
    [Migration("20180202082401_Refact db HistoryTest")]
    partial class RefactdbHistoryTest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("benchmark.Functional.Entity.HistoryTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<string>("ExecutionTime");

                    b.Property<string>("TypeOperation");

                    b.HasKey("Id");

                    b.ToTable("HistoryTests");
                });

            modelBuilder.Entity("benchmark.Functional.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ProductName");

                    b.Property<Guid>("VendorId");

                    b.Property<int>("cost");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("benchmark.Functional.Entity.ProducteInWareHouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<Guid>("ProductId");

                    b.Property<Guid>("WareHouseId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("ProducteInWareHouses");
                });

            modelBuilder.Entity("benchmark.Functional.Entity.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("benchmark.Functional.Entity.WareHouse", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Locatoin");

                    b.Property<string>("name");

                    b.HasKey("id");

                    b.ToTable("WareHouses");
                });

            modelBuilder.Entity("benchmark.Functional.Entity.Product", b =>
                {
                    b.HasOne("benchmark.Functional.Entity.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("benchmark.Functional.Entity.ProducteInWareHouse", b =>
                {
                    b.HasOne("benchmark.Functional.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("benchmark.Functional.Entity.WareHouse", "WareHouse")
                        .WithMany()
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
